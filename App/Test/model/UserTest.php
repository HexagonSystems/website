<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-15 at 06:26:57.
 */


class UserTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var User
     */
    protected $User;

    /**
     * @covers User::setDatabase
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $host = "localhost";
        $db = "hexagon";
        $user = "root";
        $pass = "root";
        $this->database = new PDO("mysql:host=$host;dbname=$db",$user,$pass);
        $this->User = new User($this->database);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {  
        // //Delete 2nd last create
        $this->database->query("DELETE FROM `member` WHERE `username` = 'Steve'");
        // //Move last user create to DBTEST1 so we can check it happened
        // $this->database->query("UPDATE  `users` SET  `username` =  'DBTEST1', `email` =  'DBTEST21' WHERE `username` =  'DBTEST'");    
    }



    /**
     * @covers User::checkUsername
     */
    public function testCheckUsername()
    {
        $username = $this->User->checkUsername("stephen");
       
        $this->assertEquals($username, 'Username found');
        
        $username = $this->User->checkUsername("Steve");
       
        $this->assertEquals($username, 'Username not found');
    }
    
    /**
     * @covers User::checkEmail
     */
    public function testCheckEmail()
    {
        $email = $this->User->checkEmail("alex-robinson@live.com");
       
        $this->assertEquals($email, 'Email found');
        
        $email = $this->User->checkEmail("fake@steve.com");
       
        $this->assertEquals($email, 'Email not found');
    }

    /**
     * @covers User::checkPassword
     */
    public function testCheckPassword()
    {
        //set Password like it's been pulled from DB
        $this->User->setPassword("password", "fromdb");
        
        //as we set the Password rawly it is now just 'password'
        $this->assertEquals("password" , $this->User->getPassword());
        
        //set Password as a new password this will encrypt the password
        $this->User->setPassword("password");
        
        //check Password with encryption happening
        $test = $this->User->checkPassword("password");
       
        $this->assertTrue($test);
        
        //check Password with encryption using the wrong password
        $test = $this->User->checkPassword("stephen");
       
        $this->assertFalse($test);
    }
    
    /**
     * @covers User::createUser
     */
    public function testCreateUser()
    {
        // Stop here and mark this test as incomplete.
        //$this->markTestIncomplete( 'Skipping Test Save until insert set is revised');
        $user = $this->User->createUser("Stephen", "McMahon", "Steve", "password", "stephentmcm@gmail.com", "0430580777");
       
        $this->assertInstanceOf('User', $user);

        return $user;
     }

    /**
     * @depends testCreateUser
     * @covers User::save
     */
    public function testSave(User $user)
    {
        // Stop here and mark this test as incomplete.
        //$this->markTestIncomplete( 'Skipping Test Save until insert set is revised');
        
        //$this->User->createUser("Stephen", "McMahon", "Steve", "password", "stephentmcm@gmail.com", "0430580777");
        
        $this->assertEquals("Steve", $user->getUsername());
        
        $saved = $user->save();
       
        $this->assertEquals('saved', $saved);

     }
     
    /**
     * @covers User::loginUser
     */
    public function testLoginUser()
    {
        //Good user
        $user = $this->User->loginUser("Stephen", "password");
       
        $this->assertInstanceOf('User', $user);
        
        //Wrong username
        $login = $this->User->loginUser("Stephena", "password");
       
        $this->assertEquals($login, "Username not found");
        
        //Wrong password
        $login = $this->User->loginUser("Stephen", "passwordWrong");
       
        $this->assertEquals($login, "Password Incorrect");
    }

    /**
     * @covers User::getUsernameFromEmail
     */
    public function testGetUsernameFromEmail()
    {
        $this->assertEquals("Stephen", $this->User->getUsernameFromEmail("fake@email.com"));
    }

    /**
     * @covers User::getEmailFromUsername
     */
    public function testGetEmailFromUsername()
    {
        $this->assertEquals("fake@email.com", $this->User->getEmailFromUsername("Stephen"));
    }

    /**
     * @covers User::setUsername
     * @covers User::getUsername
     * @covers User::setFirstName
     * @covers User::getFirstName
     * @covers User::setLastName
     * @covers User::getLastName
     * @covers User::setEmail
     * @covers User::getEmail
     * @covers User::setPhoneNo
     * @covers User::getPhoneNo
     * @covers User::setMemberId
     * @covers User::getMemberId
     * @covers User::setPassword
     * @covers User::getPassword
     */
    public function testGetsAndSets(){
        $this->User->setUsername("test");

        $this->assertEquals("test", $this->User->getUsername() );

        $this->User->setFirstName("test");

        $this->assertEquals("test", $this->User->getFirstName() );

        $this->User->setLastName("test");

        $this->assertEquals("test", $this->User->getLastName() );

        $this->User->setEmail("test");

        $this->assertEquals("test", $this->User->getEmail() );

        $this->User->setPhoneNo("test");

        $this->assertEquals("test", $this->User->getPhoneNo() );

        $this->User->setMemberId("test");

        $this->assertEquals("test", $this->User->getMemberId() );

    }

    /**
     * @covers User::displayUsers
     */
    public function testDisplayUsers()
    {
       foreach ($this->User->displayUsers() as $key => $array) {
            $this->assertArrayHasKey('username', $array);
       }   
        
    }

    /**
     * @covers User::sessionCreate
     * @covers User::sessionDestroy
     */
    public function testSession()
    {
        $this->User->setUsername('TestSession');
        $this->User->sessionCreate();

        $this->assertTrue($this->User->sessionDestroy());
    }

}